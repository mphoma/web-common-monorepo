'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var Events = /*#__PURE__*/function () {
  function Events() {
    _classCallCheck(this, Events);
  }

  _createClass(Events, null, [{
    key: "subscribe",
    // Subscribes to events
    value: function subscribe(event, context, callback) {
      try {
        if (typeof event !== 'string' || typeof context !== 'string' || typeof callback !== 'function') {
          console.warn('Invalid event, context or callback passed to Events.subscribe.');
          return;
        } // Check if already subscribed


        var subscriptions = Events.CoreEventSubscriptions.get(event) || new Map();
        var subscription = subscriptions.get(context);

        if (subscription) {
          console.warn("Context ".concat(context, " already subscribed to event ").concat(event, "."));
          return;
        } // Add new subscription


        subscriptions.set(context, callback);
        Events.CoreEventSubscriptions.set(event, subscriptions);
        return {
          event: event,
          context: context,
          callback: callback,
          remove: function remove() {
            return Events.remove(event, context);
          }
        };
      } catch (e) {
        Events.emit('error', {
          error: e
        });
      }
    } // Remove a subscribed event callback

  }, {
    key: "remove",
    value: function remove(event, context) {
      try {
        if (typeof event !== 'string' || typeof context !== 'string') {
          console.warn('Invalid event or string passed to Events.remove.');
          return;
        }

        var subscriptions = Events.CoreEventSubscriptions.get(event);

        if (!subscriptions) {
          console.warn("Tried to remove context ".concat(context, " from event ").concat(event, " that does not exist."));
          return;
        }

        if (subscriptions.has(context)) {
          subscriptions.delete(context);
        }

        Events.CoreEventSubscriptions.set(event, subscriptions);
      } catch (e) {
        Events.emit('error', {
          error: e
        });
      }
    } // Invokes all subscribed event callbacks with the specified parameters

  }, {
    key: "emit",
    value: function emit(event, params, onError) {
      try {
        if (typeof event !== 'string') {
          console.warn('Invalid event passed to Events.emit.');
          return;
        }

        var subscriptions = Events.CoreEventSubscriptions.get(event);

        if (!subscriptions) {
          console.warn("No subscriptions for event ".concat(event));
          return;
        } // Emit event to each subscription, NOTE this is a map, and not an iterable, for won't work here


        var _iterator = _createForOfIteratorHelper(subscriptions),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                _ = _step$value[0],
                callback = _step$value[1];

            if (!callback) {
              return;
            }

            callback({
              name: event,
              data: params
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        ;
      } catch (e) {
        console.error(e);
        typeof onError === 'function' && onError(e);
      }
    }
  }]);

  return Events;
}();
Events.CoreEventSubscriptions = new Map();

exports.Events = Events;
